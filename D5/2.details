项目的配置文件位置是 mysite/settings.py，数据库的设置在此文件中。

Django模式使用SQLite数据库。作为单机的小型应用，可以直接使用这个数据库；当运行在生产环境中时，可以切换成性能更好的数据库，比如说MySQL。

切换数据库操作：

1. 安装相应的数据库绑定 (bindings)，比如说MySQL可以安装mysqlclient
2. 找到项目配置文件settings.py 中DATABASES 里的'default' 键
3. 把ENGINE 改成相应的数据库设定，默认支持的选项有:
    django.db.backends.sqlite3
    django.db.backends.postgresql
    django.db.backends.mysql
    django.db.backends.oracle
4. 根据需要提供必要的数据库相关配置信息，详情可参考：
   https://docs.djangoproject.com/en/1.11/ref/settings/#databases
   以MySQL为例，范例配置如下：
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'NAME': 'name_of_database',
        'USER': 'name_of_login_user',
        'PASSWORD': 'database_password',
        'CHARSET': 'utf8',
    }



使用mysql数据库时设置utf8编码

如果使用mysql作为数据库后端，那么在创建数据库的时候设置数据库的默认字符编码，后续django创建数据表的时候就会使用这个字符编码。

mysql 命令范例（这里使用了utf8编码）：

    create database django default charset utf8;





数据库设置中的TIME_ZONE的作用

项目配置中的 USE_TZ 与数据库的TIME_ZONE 配合，所起的作用有以下几种：

1. USE_TZ = True
   数据库不支持时区（SQLite, MySQL, Oracle)
   两种结果：
        设置了TIME_ZONE: 当做本地时间写入数据库
        没有设置TIME_ZONE: 转成UTC时间再写入数据库
2. USE_TZ = True
   数据库支持时区（PostgreSQL）
   如果设置了TIME_ZONE就会出错
3. USE_TZ = False
   如果设置了TIME_ZONE就会出错



创建带时区的时间

from datetime import timezone, timedelta, datetime
zone = timezone(timedelta(hours=8), name="Asia/Chongqing")
time = datetime(2018, 1, 1, 1, 1, 0, 0, zone)



Django对多数据库的支持

Django项目的数据库配置中，可以配置多个数据库，其中有一个是default数据库。Django默认的使用策略是这样：

1. 来自foo数据库的对象，会被保存回foo数据库
2. 如果没有指明数据库，所有的查询都将使用default数据库

如果需要改变Django的这种行为，可以自定义数据库路由。可参考 https://docs.djangoproject.com/en/1.11/topics/db/multi-db/#topics-db-multi-db-routing


也可以为数据库操作手动指定数据库

>>> # 使用 default 数据库
>>> Author.objects.all()

>>> # 这个也使用 default 数据库
>>> Author.objects.using('default').all()

>>> # 这个使用 other 数据库
>>> Author.objects.using('other').all()

>>> # 保存对象时指定数据库，使用using参数
>>> obj.save(using='other')

>>> # 删除对象时指定数据库，也使用using参数
>>> obj.delete(using='other')

对于save和delete方法，如果不指定数据库，则使用对象的来源数据库。





为应用的模型创建数据表

命令 python manage.py migrate 将查找 INSTALLED_APPS 中的所有应用，并为它们创建必须的数据表。





创建数据模型

在应用目录下有一个models.py 文件，对应用的模型的定义存放在这个文件中。

模型以类的形式定义，类继承自 django.db.models.Model，定义模型的要点：

1. 模型的类名将作为数据表名的一部分，另外一部分来自应用的名字
2. 模型的每一个字段都是一个Field实例，比如说CharField, IntegerField
3. 字段属性的名字将是数据表的字段名
4. 可以为字段类传递一个字符串作为第一个位置参数，作为适合人理解的字段名字
5. 有些字段有必需的参数，比如CharField需要max_length
6. ForeignKey可用于定义表之间的关系

范例：

from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)




把应用安装到项目上

Django的应用是“可拔插”的，也就是说一个应用不会绑死在某个项目上，它可以在多个项目中使用，可以单独发布。

以下配置把名叫polls的应用安装到当前项目上：

INSTALLED_APPS = [
    ...
    'polls',
    ...
]

这样，就可以通过以下命令把模型应用到数据库：

python manage.py makemigrations <appname>
python manage.py migrate <appname>

第一条命令告诉Django，模型有变动，Django将会在应用的子目录migrations 中创建新的模块。第二条命令把migrations目录中的模块应用到数据库中，曾经应用过的模块将不会被再次应用；Django通过数据库中一个名叫django_migrations 的表来跟踪已经应用的migration。

如果需要查看每个migrations模块对数据库所做的更改，可以使用这样的命令：

    python manage.py sqlmigrate <appname> <number>

范例：

    python manage.py sqlmigrate polls 0001




在交互式环境使用Django的模型API

Django提供了一套方便的操作数据模型的API，可以通过交互式python环境来测试。

有两种方法可以设置适当的测试环境：

1. 运行命令python manage.py shell
2. 在python交互式界面，设置环境变量DJANGO_SETTINGS_MODULE 的值为
   mysite.settings，然后运行这两条python指令：
    import django
    django.setup()

环境设置好之后，就可以导入定义好的模块做测试，以下命令导入polls应用的models模块中的Question和Choice两个模型：

    from polls.models import Question, Choice

注意，polls必须在python的导入路径中。如果从项目的顶层目录运行python解释器，这个路径就会自动设置好。



Django模型的部分API使用范例

# 创建新记录

>>> a = Author(name='Alice', age=18)
>>> a.save()
>>> a = Author.object.create(name='Alice', age=18)


# 删除记录

>>> e.delete()
(1, {'weblog.Entry': 1})
>>> Entry.objects.filter(pub_date__year=2005).delete()
(5, {'webapp.Entry': 5})


# 修改记录
>>> a = Author.objects.get(name='Alice', age=18)
>>> a.age += 1
>>> a.save()
>>> Entry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')

# Change every Entry so that it belongs to this Blog.
>>> b = Blog.objects.get(pk=1)
>>> Entry.objects.all().update(blog=b)


# 查询记录

通过模型的Manager可以获得一个QuerySet，通过QuerySet可以查询数据库记录，每一个模型都有一个Manager，它的名字默认是objects。

>>> Entry.objects.all()                             # 获取模型的所有记录
>>> Entry.objects.filter(pub_date__year=2006)       # 抽取符合条件的记录
>>> Entry.objects.exclude(pub_date__year=2006)      # 排除符合条件的记录

串接过滤条件

>>> Entry.objects.filter(
...     headline__startswith='What'
... ).exclude(
...     pub_date__gte=datetime.date.today()
... ).filter(
...     pub_date__gte=datetime.date(2005, 1, 30)
... )

QuerySet 的特点

1. 每一个QuerySet都是独一的，互相之间是独立的，以下q1, q2是两个独立的QuerySet
    q1 = Entry.objects.filter(headline__startswith="What")
    q2 = q1.exclude(pub_date__gte=datetime.date.today())
2. QuerySet是惰性的，意思是到“最后一刻”才会操作数据库，下面四条语句，到print语句时才真正操作数据库
    q = Entry.objects.filter(headline__startswith="What")
    q = q.filter(pub_date__lte=datetime.date.today())
    q = q.exclude(body_text__icontains="food")
    print(q)


获取一条记录，使用get方法，get方法支持和filter一样的表达式：

>>> one_entry = Entry.objects.get(pk=1)

如果没有匹配的记录，或者有超过一条的记录，get方法会抛出异常。


限制结果集大小

>>> Entry.objects.all()[:5]     # 返回QuerySet，不操作数据库
>>> Entry.objects.all()[5:10]   # 返回QuerySet，不操作数据库
>>> Entry.objects.all()[:10:2]  # 用了step, 操作数据库，返回list


对结果排序

Entry.objects.filter(pub_date__year=2005).order_by('-pub_date', 'headline')

此语句先按pub_date反序排，然后按照headline顺序排。



按字段做过滤

在字段名和操作符之间用两个下划线分隔：

    Book.objects.filter(name__contains='Python')

操作符的详细用法请参考
https://docs.djangoproject.com/en/1.11/ref/models/querysets/#field-lookups

可用的操作符：

1. exact
2. iexact
3. contains
4. icontains
5. in
6. gt
7. gte
8. lt
9. lte
10. startswith
11. istartswith
12. endswith
13. iendswith
14. range
15. date
16. year
17. month
18. day
19. week
20. week_day
21. time
22. hour
23. minute
24. second
25. isnull
26. regex
27. iregex


对结果做统计操作

参考
https://docs.djangoproject.com/en/1.11/ref/models/querysets/#aggregation-functions

from django.db.models import Avg, Max, Min, Count, Sum, StdDev, Variance

In [37]: Book.objects.filter(price__gt=10).aggregate(Max('price'), Min('price'))
Out[37]: {'price__max': Decimal('7.14'), 'price__min': Decimal('3.14')}

注意：

统计函数实在数据库里面执行的，所以需要数据库的支持，有些数据库并不支持所有上面所列的统计函数，执行时会出错，出错信息可能类似这样：

    OperationalError: no such function: STDDEV_POP

sqlite3 不支持StdDev, Variance等操作，执行时会出现类似上面的信息，把数据库换成MySQL可以解决，成功运行的命令如下：

In [2]: from app1.models import Book
In [3]: from django.db.models import StdDev, Variance
In [6]: Book.objects.all().aggregate(StdDev('price'), Variance('price'))
Out[6]: {'price__stddev': 11.8136, 'price__variance': 139.56}



在多条件查询中表示 OR 的关系

在QuerySet中是无法表示 OR 的关系的，借助Q 对象就可以。

from django.db.models import Q

Book.objects.filter(Q(pages__gte=10)|Q(price__lt=100))


Q对象的更多用法 (Query)

and: Q(pk=1) & Q(pk=2)
or: Q(pk=1) | Q(pk=2)
not: ~Q(pk=1)

from django.db.models import Q
condition = Q(pk__lt=100) & Q(pk__gt=50)
M.objects.filter(condition)




引用数据表中的字段

以下操作：

reporter = Reporters.objects.get(name='Tintin')
reporter.stories_filed += 1
reporter.save()

可以换成：

from django.db.models import F

reporter = Reporters.objects.get(name='Tintin')
reporter.stories_filed = F('stories_filed') + 1
reporter.save()

通过 F() 可以引用数据表中的字段，这样，该字段的值不会从数据库读入Python中，Python也无从知晓该字段的值，加一的操作完全在数据库内容执行，效果等同于：

update reporter set stories_filed = stories_filed + 1;

用这种方式更新的记录，需要重载该记录，才能看到新的值：

reporter = Reporters.objects.get(pk=reporter.pk)
# 或者这样：
# reporter.refresh_from_db()

F() 可以用在QuerySet对象的update方法上，见避免了get()和save()操作：

reporter = Reporters.objects.filter(name='Tintin')
reporter.update(stories_filed=F('stories_filed') + 1)


F() 可以提升性能：

1. 让数据库做计算操作，而不是让python来做
2. 减少某些操作的查询次数




在Django中使用原始的SQL语句

有两种方法可以执行原始的SQL语句，一种是通过Manager的raw方法：

for book in Book.objects.raw('select * from hello_author'):
    print(book)

两外一种是直接使用数据库连接：

from django.db import connection

with connection.cursor() as cursor:
    cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])
    cursor.execute("SELECT foo FROM bar WHERE baz = %s", [self.baz])
    row = cursor.fetchone()




model 的主键的确定方法

如果定义模型的时候没有指定某个字段为主键 (primary_key=True)，Django 将会创建一个名叫id 的主键，该字段是整型，值自动增加。从模型的实例对象查询此字段时可以用 record.id 或者 record.pk。



Django 中模型之间的关系

Django 提供了三种模型之间的关系，分别是：

1. 多对一（一对多），通过ForeignKey 实现
2. 多对多，通过ManyToManyField 实现
3. 一对一，通过OneToOneField 实现

这三种关系本质上都是通过外键 (foreign key) 来实现的。



创建多对一关系

以父子关系为例，一个父亲可以有多个孩子，一个孩子只能有一个父亲，父亲是“一”，孩子是“多”。

class Father(models.Model):
    name = models.CharField(max_length=128)

class Child(models.Model):
    name = models.CharField(max_length=128)
    father = models.ForeignKey(Father)


通过多对一关系获取关联的记录

f1 = Father.objects.create(name="Abraham")
f2 = Father.objects.create(name="Isaac")
c1 = Child.objects.create(name="Isaac", father=f1)
c2 = Child.objects.create(name="Ishmael", father=f1)
c3 = Child.objects.create(name="Esau", father=f2)
c4 = Child.objects.create(name="Israel", father=f2)

通过Father 记录获取关联的Child 记录：

In [14]: f1.child_set.all()
Out[14]: <QuerySet [<Child: Child object>, <Child: Child object>]>

通过Child 记录获取关联的Father 记录：

In [15]: c1.father
Out[15]: <Father: Father object>

使用关联记录作为查询条件：

In [19]: Father.objects.get(child=c1)
Out[19]: <Father: Father object>

In [20]: Father.objects.get(child=c1.pk)
Out[20]: <Father: Father object>

In [21]: Father.objects.filter(child__in=[c1,c2])
Out[21]: <QuerySet [<Father: Father object>, <Father: Father object>]>

In [22]: Father.objects.filter(child__name='Israel')
Out[22]: <QuerySet [<Father: Father object>]>

In [23]: Child.objects.filter(father__name='Abraham')
Out[23]: <QuerySet [<Child: Child object>, <Child: Child object>]>


多对一关系中删除操作的影响

1. 默认情况下，删除“一”中的记录，“多”中的相关记录会被删除。删除“多”中的记录不影响“一”中的记录。
2. 如果需要改变关联删除这种行为，可以在定义ForeignKey 的时候传递一个 on_delete=models.DO_NOTHING 的参数。



多对多关系

创建多对多关系

以文章和标签为例，一篇文章可以使用多个标签，一个标签可以给多篇文章使用，是多对多的关系。

class Tag(models.Model):
    desc = models.CharField(max_length=128)

class Article(models.Model):
    title = models.CharField(max_length=128)
    tag = models.ManyToManyField(Tag)


通过多对多关系获取关联的记录

In [22]: t1 = Tag.objects.create(desc='Linux')
In [23]: t2 = Tag.objects.create(desc='Python')
In [24]: a1 = Article.objects.create(title='Python on Linux is good')
In [25]: a2 = Article.objects.create(title='Python on Linux is powerful')
In [26]: a1.tag.add(t1, t2)
In [27]: a2.tag.add(t1, t2)

通过Tag 记录获取关联的Article 记录：

In [28]: t1.article_set.all()
Out[28]: <QuerySet [<Article: Article object>, <Article: Article object>]>

通过Article 记录获取关联的Tag 记录：

In [29]: a1.tag.all()
Out[29]: <QuerySet [<Tag: Tag object>, <Tag: Tag object>]>

使用关联记录作为查询条件：

In [30]: Tag.objects.filter(article__in=[a1, a2])   <-- 有重复
Out[30]: <QuerySet [<Tag: Tag object>, <Tag: Tag object>, <Tag: Tag object>, <Tag: Tag object>]>

In [31]: Tag.objects.filter(article__in=[a1, a2]).distinct() <-- 去重
Out[31]: <QuerySet [<Tag: Tag object>, <Tag: Tag object>]>

In [32]: Article.objects.filter(tag__in=[t1.pk, t2]).distinct()
Out[32]: <QuerySet [<Article: Article object>, <Article: Article object>]>

In [33]: Article.objects.filter(tag__desc__startswith='L').distinct()
Out[33]: <QuerySet [<Article: Article object>, <Article: Article object>]>


多对多关系中删除操作的影响

删除多对多关系中任何一边的记录，不会连带删除另外一边的记录。




一对一关系

创建一对一关系

以非对称加密系统中的公钥和私钥为例。实践中，一个公钥唯一匹配一个私钥，一个私钥唯一匹配一个公钥，是一对一的关系。

class Private(models.Model):
    keyid = models.CharField(max_length=128)


class Public(models.Model):
    keyid = models.CharField(max_length=128)
    private = models.OneToOneField('Private', null=True)


通过一对一关系获取关联的记录

In [2]: pri1 = Private.objects.create(keyid='a')

In [3]: pri2 = Private.objects.create(keyid='b')

In [4]: pub1 = Public.objects.create(keyid='c')

In [5]: pub2 = Public.objects.create(keyid='d')

In [13]: pub1.private = pri1

In [14]: pub1.save()

In [15]: pub2.private = pri2

In [16]: pub2.save()

通过Private 记录获取关联的Public 记录：

In [32]: pri1.public
Out[32]: <Public: Public object>

通过Public 记录获取关联的Private 记录：

In [33]: pub1.private
Out[33]: <Private: Private object>

使用关联记录作为查询条件：

In [34]: Public.objects.get(private=pri1)
Out[34]: <Public: Public object>

In [35]: Public.objects.filter(private__in=[pri1,pri2])
Out[35]: <QuerySet [<Public: Public object>, <Public: Public object>]>

In [36]: Private.objects.filter(public=pub1.pk)
Out[36]: <QuerySet [<Private: Private object>]>


一对一关系中删除操作的影响

一对一关系本质上是外键关系（和多对一关系一样），只不过一对一关系给外键加上唯一性限制而已。两个模型的定义中，没有OneToOneField 的那个模型可以被称为“被引用”的模型。默认情况下，删除“被引用”的模型的记录，会连带删除对应的“引用”模型的记录，在定义OneToOneField 时加上on_delete=models.DO_NOTHING 可以改变连带删除行为。删除“引用”模型的记录则不会删除“被引用”模型的记录。这和“一对多”关系是一样的。




定义model 的时候，如果给DateTimeField 加上auto_now=True 参数后，创建或者更新记录时此字段的值都将被设置为当前时间。auto_now_add=True 只在创建记录的时候使用当前时间，这一点与auto_now 不一样。

在Django 程序中，如果已经启用了时区，就要留心时间的时区问题，可以使用 django.utils.timezone 模块中的相关方法，比如说，当要获取包含了时区信息的当前时间时，用timezone.now()，而不是datetime.now()。timezone 模块中还包含了对时区信息做检测和转换的方法。

timezone 常用方法：

    timezone.is_aware
    timezone.is_naive
    timezone.make_aware
    timezone.make_naive
    timezone.localtime
    timezone.now

也可以通过pytz 模块中的相关方法做时区的操作，pytz 模块的常用方法：

now = datetime.now()                    <-- 无时区信息
tz = pytz.timezone('Asia/Chongqing')    <-- 创建时区
aware_time = tz.localize(now)           <-- 加上本地时区信息
tz2 = pytz.timezone('UTC')              <-- 另外一个时区
tz2.normalize(aware_time)               <-- 时区转换
aware_time.astimezone(tz2)              <-- 时区转换，与上等价



Django 提供了很好的ORM，用来操作数据库非常方便，即使是在非网页应用程序中，也可以使用Django 的数据库操作接口。

范例代码：

import os
import sys
from importlib import import_module
import django

def load_models(project_path, project_name, app_name):
    sys.path.insert(0, project_path)
    mod_name = '%s.settings' % project_name
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", mod_name)
    django.setup()
    models = import_module('%s.models' % app_name)
    sys.path.remove(project_path)
    return models

# Django 项目所在的目录
project_path = os.path.join(os.path.realpath(os.path.dirname(__file__)), 'db')
# Django 项目的名称
project_name = 'db'
# 数据库模型所在的App 的名称
app_name = 'store'
models = load_models(project_path, project_name, app_name)
# 把需要用到的模型放到当前名字空间，方便使用
Log = models.Log




sqlite命令行操作参考

    .help           <-- 显示帮助信息
    .schema         <-- 显示所有表的结构
    .schema tb1     <-- 显示表db1的结构
    .header on
    .mode column
    select * from tb1
